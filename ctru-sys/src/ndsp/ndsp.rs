/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ndspOutputMode {
    NDSP_OUTPUT_MONO = 0,
    NDSP_OUTPUT_STEREO = 1,
    NDSP_OUTPUT_SURROUND = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ndspClippingMode { NDSP_CLIP_NORMAL = 0, NDSP_CLIP_SOFT = 1, }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ndspSpeakerPos {
    NDSP_SPKPOS_SQUARE = 0,
    NDSP_SPKPOS_WIDE = 1,
    NDSP_SPKPOS_NUM = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ndspAdpcmData {
    pub index: u16_,
    pub history0: s16,
    pub history1: s16,
}
impl ::core::default::Default for ndspAdpcmData {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type ndspWaveBuf = tag_ndspWaveBuf;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed1 {
    NDSP_WBUF_FREE = 0,
    NDSP_WBUF_QUEUED = 1,
    NDSP_WBUF_PLAYING = 2,
    NDSP_WBUF_DONE = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct tag_ndspWaveBuf {
    pub _bindgen_data_1_: [u64; 1usize],
    pub nsamples: u32_,
    pub adpcm_data: *mut ndspAdpcmData,
    pub offset: u32_,
    pub looping: u8,
    pub status: u8_,
    pub sequence_id: u16_,
    pub next: *mut ndspWaveBuf,
}
impl tag_ndspWaveBuf {
    pub unsafe fn data_pcm8(&mut self) -> *mut *mut s8 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_1_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn data_pcm16(&mut self) -> *mut *mut s16 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_1_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn data_adpcm(&mut self) -> *mut *mut u8_ {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_1_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn data_vaddr(&mut self) -> *mut *const ::libc::c_void {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_1_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for tag_ndspWaveBuf {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type ndspCallback =
    ::core::option::Option<unsafe extern "C" fn(data: *mut ::libc::c_void)>;
pub type ndspAuxCallback =
    ::core::option::Option<unsafe extern "C" fn(data: *mut ::libc::c_void,
                                                nsamples: ::libc::c_int,
                                                samples:
                                                    *mut *mut ::libc::c_void)>;
extern "C" {
    pub fn ndspUseComponent(binary: *const ::libc::c_void, size: u32_,
                            progMask: u16_, dataMask: u16_);
    pub fn ndspInit() -> Result;
    pub fn ndspExit();
    pub fn ndspGetDroppedFrames() -> u32_;
    pub fn ndspGetFrameCount() -> u32_;
    pub fn ndspSetMasterVol(volume: f32);
    pub fn ndspSetOutputMode(mode: ndspOutputMode);
    pub fn ndspSetClippingMode(mode: ndspClippingMode);
    pub fn ndspSetOutputCount(count: ::libc::c_int);
    pub fn ndspSetCapture(capture: *mut ndspWaveBuf);
    pub fn ndspSetCallback(callback: ndspCallback, data: *mut ::libc::c_void);
    pub fn ndspSurroundSetDepth(depth: u16_);
    pub fn ndspSurroundSetPos(pos: ndspSpeakerPos);
    pub fn ndspSurroundSetRearRatio(ratio: u16_);
    pub fn ndspAuxSetEnable(id: ::libc::c_int, enable: u8);
    pub fn ndspAuxSetFrontBypass(id: ::libc::c_int, bypass: u8);
    pub fn ndspAuxSetVolume(id: ::libc::c_int, volume: f32);
    pub fn ndspAuxSetCallback(id: ::libc::c_int, callback: ndspAuxCallback,
                              data: *mut ::libc::c_void);
}

use ::types::*;
