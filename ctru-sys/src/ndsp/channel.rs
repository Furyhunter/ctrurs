/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]

use ::types::*;
use super::ndsp::ndspWaveBuf;

#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed1 {
    NDSP_ENCODING_PCM8 = 0,
    NDSP_ENCODING_PCM16 = 1,
    NDSP_ENCODING_ADPCM = 2,
}
pub const NDSP_FORMAT_PCM8: Enum_Unnamed2 =
    Enum_Unnamed2::NDSP_FORMAT_MONO_PCM8;
pub const NDSP_FORMAT_PCM16: Enum_Unnamed2 =
    Enum_Unnamed2::NDSP_FORMAT_MONO_PCM16;
pub const NDSP_FORMAT_ADPCM: Enum_Unnamed2 =
    Enum_Unnamed2::NDSP_FORMAT_MONO_ADPCM;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed2 {
    NDSP_FORMAT_MONO_PCM8 = 1,
    NDSP_FORMAT_MONO_PCM16 = 5,
    NDSP_FORMAT_MONO_ADPCM = 9,
    NDSP_FORMAT_STEREO_PCM8 = 2,
    NDSP_FORMAT_STEREO_PCM16 = 6,
    NDSP_FRONT_BYPASS = 16,
    NDSP_3D_SURROUND_PREPROCESSED = 64,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ndspInterpType {
    NDSP_INTERP_POLYPHASE = 0,
    NDSP_INTERP_LINEAR = 1,
    NDSP_INTERP_NONE = 2,
}
extern "C" {
    pub fn ndspChnReset(id: ::libc::c_int);
    pub fn ndspChnInitParams(id: ::libc::c_int);
    pub fn ndspChnIsPlaying(id: ::libc::c_int) -> u8;
    pub fn ndspChnGetSamplePos(id: ::libc::c_int) -> u32_;
    pub fn ndspChnGetWaveBufSeq(id: ::libc::c_int) -> u16_;
    pub fn ndspChnIsPaused(id: ::libc::c_int) -> u8;
    pub fn ndspChnSetPaused(id: ::libc::c_int, paused: u8);
    pub fn ndspChnSetFormat(id: ::libc::c_int, format: u16_);
    pub fn ndspChnSetInterp(id: ::libc::c_int, type_: ndspInterpType);
    pub fn ndspChnSetRate(id: ::libc::c_int, rate: f32);
    pub fn ndspChnSetMix(id: ::libc::c_int, mix: *mut f32);
    pub fn ndspChnSetAdpcmCoefs(id: ::libc::c_int, coefs: *mut u16_);
    pub fn ndspChnWaveBufClear(id: ::libc::c_int);
    pub fn ndspChnWaveBufAdd(id: ::libc::c_int, buf: *mut ndspWaveBuf);
    pub fn ndspChnIirMonoSetEnable(id: ::libc::c_int, enable: u8);
    pub fn ndspChnIirMonoSetParamsCustomFilter(id: ::libc::c_int, a0: f32,
                                               a1: f32, b0: f32) -> u8;
    pub fn ndspChnIirMonoSetParamsLowPassFilter(id: ::libc::c_int, f0: f32)
     -> u8;
    pub fn ndspChnIirMonoSetParamsHighPassFilter(id: ::libc::c_int, f0: f32)
     -> u8;
    pub fn ndspChnIirBiquadSetEnable(id: ::libc::c_int, enable: u8);
    pub fn ndspChnIirBiquadSetParamsCustomFilter(id: ::libc::c_int, a0: f32,
                                                 a1: f32, a2: f32, b0: f32,
                                                 b1: f32, b2: f32) -> u8;
    pub fn ndspChnIirBiquadSetParamsLowPassFilter(id: ::libc::c_int, f0: f32,
                                                  Q: f32) -> u8;
    pub fn ndspChnIirBiquadSetParamsHighPassFilter(id: ::libc::c_int, f0: f32,
                                                   Q: f32) -> u8;
    pub fn ndspChnIirBiquadSetParamsBandPassFilter(id: ::libc::c_int, f0: f32,
                                                   Q: f32) -> u8;
    pub fn ndspChnIirBiquadSetParamsNotchFilter(id: ::libc::c_int, f0: f32,
                                                Q: f32) -> u8;
    pub fn ndspChnIirBiquadSetParamsPeakingEqualizer(id: ::libc::c_int,
                                                     f0: f32, Q: f32,
                                                     gain: f32) -> u8;
}
