/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct romfs_header {
    pub headerSize: u32_,
    pub dirHashTableOff: u32_,
    pub dirHashTableSize: u32_,
    pub dirTableOff: u32_,
    pub dirTableSize: u32_,
    pub fileHashTableOff: u32_,
    pub fileHashTableSize: u32_,
    pub fileTableOff: u32_,
    pub fileTableSize: u32_,
    pub fileDataOff: u32_,
}
impl ::core::default::Default for romfs_header {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct romfs_dir {
    pub parent: u32_,
    pub sibling: u32_,
    pub childDir: u32_,
    pub childFile: u32_,
    pub nextHash: u32_,
    pub nameLen: u32_,
    pub name: [u16_; 0usize],
}
impl ::core::default::Default for romfs_dir {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct romfs_file {
    pub parent: u32_,
    pub sibling: u32_,
    pub dataOff: u64_,
    pub dataSize: u64_,
    pub nextHash: u32_,
    pub nameLen: u32_,
    pub name: [u16_; 0usize],
}
impl ::core::default::Default for romfs_file {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub enum romfs_mount { }
extern "C" {
    pub fn romfsMount(mount: *mut *mut romfs_mount) -> Result;
    pub fn romfsMountFromFile(file: Handle, offset: u32_,
                              mount: *mut *mut romfs_mount) -> Result;
    pub fn romfsBind(mount: *mut romfs_mount) -> Result;
    pub fn romfsUnmount(mount: *mut romfs_mount) -> Result;
}

use ::types::*;
