/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum DVLE_type { VERTEX_SHDR = 0, GEOMETRY_SHDR = 1, }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum DVLE_constantType {
    DVLE_CONST_BOOL = 0,
    DVLE_CONST_u8 = 1,
    DVLE_CONST_FLOAT24 = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum DVLE_outputAttribute_t {
    RESULT_POSITION = 0,
    RESULT_NORMALQUAT = 1,
    RESULT_COLOR = 2,
    RESULT_TEXCOORD0 = 3,
    RESULT_TEXCOORD0W = 4,
    RESULT_TEXCOORD1 = 5,
    RESULT_TEXCOORD2 = 6,
    RESULT_VIEW = 8,
    RESULT_DUMMY = 9,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum DVLE_geoShaderMode {
    GSH_POINT = 0,
    GSH_VARIABLE_PRIM = 1,
    GSH_FIXED_PRIM = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct DVLP_s {
    pub codeSize: u32_,
    pub codeData: *mut u32_,
    pub opdescSize: u32_,
    pub opcdescData: *mut u32_,
}
impl ::core::default::Default for DVLP_s {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct DVLE_constEntry_s {
    pub type_: u16_,
    pub id: u16_,
    pub data: [u32_; 4usize],
}
impl ::core::default::Default for DVLE_constEntry_s {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct DVLE_outEntry_s {
    pub type_: u16_,
    pub regID: u16_,
    pub mask: u8_,
    pub unk: [u8_; 3usize],
}
impl ::core::default::Default for DVLE_outEntry_s {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct DVLE_uniformEntry_s {
    pub symbolOffset: u32_,
    pub startReg: u16_,
    pub endReg: u16_,
}
impl ::core::default::Default for DVLE_uniformEntry_s {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct DVLE_s {
    pub type_: DVLE_type,
    pub mergeOutmaps: u8,
    pub gshMode: DVLE_geoShaderMode,
    pub gshFixedVtxStart: u8_,
    pub gshVariableVtxNum: u8_,
    pub gshFixedVtxNum: u8_,
    pub dvlp: *mut DVLP_s,
    pub mainOffset: u32_,
    pub endmainOffset: u32_,
    pub constTableSize: u32_,
    pub constTableData: *mut DVLE_constEntry_s,
    pub outTableSize: u32_,
    pub outTableData: *mut DVLE_outEntry_s,
    pub uniformTableSize: u32_,
    pub uniformTableData: *mut DVLE_uniformEntry_s,
    pub symbolTableData: *mut ::libc::c_char,
    pub outmapMask: u8_,
    pub outmapData: [u32_; 8usize],
    pub outmapMode: u32_,
    pub outmapClock: u32_,
}
impl ::core::default::Default for DVLE_s {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct DVLB_s {
    pub numDVLE: u32_,
    pub DVLP: DVLP_s,
    pub DVLE: *mut DVLE_s,
}
impl ::core::default::Default for DVLB_s {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
extern "C" {
    pub fn DVLB_ParseFile(shbinData: *mut u32_, shbinSize: u32_)
     -> *mut DVLB_s;
    pub fn DVLB_Free(dvlb: *mut DVLB_s);
    pub fn DVLE_GetUniformRegister(dvle: *mut DVLE_s,
                                   name: *const ::libc::c_char) -> s8;
    pub fn DVLE_GenerateOutmap(dvle: *mut DVLE_s);
}
use ::types::*;
