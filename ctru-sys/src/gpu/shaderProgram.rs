/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct float24Uniform_s {
    pub id: u32_,
    pub data: [u32_; 3usize],
}
impl ::core::default::Default for float24Uniform_s {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct shaderInstance_s {
    pub dvle: *mut DVLE_s,
    pub boolUniforms: u16_,
    pub boolUniformMask: u16_,
    pub intUniforms: [u32_; 4usize],
    pub float24Uniforms: *mut float24Uniform_s,
    pub intUniformMask: u8_,
    pub numFloat24Uniforms: u8_,
}
impl ::core::default::Default for shaderInstance_s {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct shaderProgram_s {
    pub vertexShader: *mut shaderInstance_s,
    pub geometryShader: *mut shaderInstance_s,
    pub geoShaderInputPermutation: [u32_; 2usize],
    pub geoShaderInputStride: u8_,
}
impl ::core::default::Default for shaderProgram_s {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
extern "C" {
    pub fn shaderInstanceInit(si: *mut shaderInstance_s, dvle: *mut DVLE_s)
     -> Result;
    pub fn shaderInstanceFree(si: *mut shaderInstance_s) -> Result;
    pub fn shaderInstanceSetBool(si: *mut shaderInstance_s, id: ::libc::c_int,
                                 value: u8) -> Result;
    pub fn shaderInstanceGetBool(si: *mut shaderInstance_s, id: ::libc::c_int,
                                 value: *mut u8) -> Result;
    pub fn shaderInstanceGetUniformLocation(si: *mut shaderInstance_s,
                                            name: *const ::libc::c_char)
     -> s8;
    pub fn shaderProgramInit(sp: *mut shaderProgram_s) -> Result;
    pub fn shaderProgramFree(sp: *mut shaderProgram_s) -> Result;
    pub fn shaderProgramSetVsh(sp: *mut shaderProgram_s, dvle: *mut DVLE_s)
     -> Result;
    pub fn shaderProgramSetGsh(sp: *mut shaderProgram_s, dvle: *mut DVLE_s,
                               stride: u8_) -> Result;
    pub fn shaderProgramSetGshInputPermutation(sp: *mut shaderProgram_s,
                                               permutation: u64_) -> Result;
    pub fn shaderProgramConfigure(sp: *mut shaderProgram_s, sendVshCode: u8,
                                  sendGshCode: u8) -> Result;
    pub fn shaderProgramUse(sp: *mut shaderProgram_s) -> Result;
}
use ::types::*;
use super::shbin::*;
