/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct NotificationHeader {
    pub dataSet: u8,
    pub unread: u8,
    pub enableJPEG: u8,
    pub isSpotPass: u8,
    pub isOptedOut: u8,
    pub unkData: [u8_; 3usize],
    pub processID: u64_,
    pub unkData2: [u8_; 8usize],
    pub jumpParam: u64_,
    pub unkData3: [u8_; 8usize],
    pub time: u64_,
    pub title: [u16_; 32usize],
}
impl ::core::default::Default for NotificationHeader {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
extern "C" {
    pub fn newsInit() -> Result;
    pub fn newsExit();
    pub fn NEWS_AddNotification(title: *const u16_, titleLength: u32_,
                                message: *const u16_, messageLength: u32_,
                                imageData: *const ::libc::c_void,
                                imageSize: u32_, jpeg: u8) -> Result;
    pub fn NEWS_GetTotalNotifications(num: *mut u32_) -> Result;
    pub fn NEWS_SetNotificationHeader(news_id: u32_,
                                      header: *const NotificationHeader)
     -> Result;
    pub fn NEWS_GetNotificationHeader(news_id: u32_,
                                      header: *mut NotificationHeader)
     -> Result;
    pub fn NEWS_SetNotificationMessage(news_id: u32_, message: *const u16_,
                                       size: u32_) -> Result;
    pub fn NEWS_GetNotificationMessage(news_id: u32_, message: *mut u16_,
                                       size: *mut u32_) -> Result;
    pub fn NEWS_SetNotificationImage(news_id: u32_,
                                     buffer: *const ::libc::c_void,
                                     size: u32_) -> Result;
    pub fn NEWS_GetNotificationImage(news_id: u32_,
                                     buffer: *mut ::libc::c_void,
                                     size: *mut u32_) -> Result;
}
use ::types::*;
