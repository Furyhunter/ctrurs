/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PAD_KEY {
    KEY_A = 1,
    KEY_B = 2,
    KEY_SELECT = 4,
    KEY_START = 8,
    KEY_DRIGHT = 16,
    KEY_DLEFT = 32,
    KEY_DUP = 64,
    KEY_DDOWN = 128,
    KEY_R = 256,
    KEY_L = 512,
    KEY_X = 1024,
    KEY_Y = 2048,
    KEY_ZL = 16384,
    KEY_ZR = 32768,
    KEY_TOUCH = 1048576,
    KEY_CSTICK_RIGHT = 16777216,
    KEY_CSTICK_LEFT = 33554432,
    KEY_CSTICK_UP = 67108864,
    KEY_CSTICK_DOWN = 134217728,
    KEY_CPAD_RIGHT = 268435456,
    KEY_CPAD_LEFT = 536870912,
    KEY_CPAD_UP = 1073741824,
    KEY_CPAD_DOWN = 2147483648,
    KEY_UP = 1073741888,
    KEY_DOWN = 2147483776,
    KEY_LEFT = 536870944,
    KEY_RIGHT = 268435472,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct touchPosition {
    pub px: u16_,
    pub py: u16_,
}
impl ::core::default::Default for touchPosition {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct circlePosition {
    pub dx: s16,
    pub dy: s16,
}
impl ::core::default::Default for circlePosition {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct accelVector {
    pub x: s16,
    pub y: s16,
    pub z: s16,
}
impl ::core::default::Default for accelVector {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct angularRate {
    pub x: s16,
    pub z: s16,
    pub y: s16,
}
impl ::core::default::Default for angularRate {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum HID_Event {
    HIDEVENT_PAD0 = 0,
    HIDEVENT_PAD1 = 1,
    HIDEVENT_Accel = 2,
    HIDEVENT_Gyro = 3,
    HIDEVENT_DebugPad = 4,
    HIDEVENT_MAX = 5,
}
extern "C" {
    pub static mut hidMemHandle: Handle;
    pub static mut hidSharedMem: *mut vu32;
}
extern "C" {
    pub fn hidInit() -> Result;
    pub fn hidExit();
    pub fn hidScanInput();
    pub fn hidKeysHeld() -> u32_;
    pub fn hidKeysDown() -> u32_;
    pub fn hidKeysUp() -> u32_;
    pub fn hidTouchRead(pos: *mut touchPosition);
    pub fn hidCircleRead(pos: *mut circlePosition);
    pub fn hidAccelRead(vector: *mut accelVector);
    pub fn hidGyroRead(rate: *mut angularRate);
    pub fn hidWaitForEvent(id: HID_Event, nextEvent: u8);
    pub fn HIDUSER_GetHandles(outMemHandle: *mut Handle,
                              eventpad0: *mut Handle, eventpad1: *mut Handle,
                              eventaccel: *mut Handle, eventgyro: *mut Handle,
                              eventdebugpad: *mut Handle) -> Result;
    pub fn HIDUSER_EnableAccelerometer() -> Result;
    pub fn HIDUSER_DisableAccelerometer() -> Result;
    pub fn HIDUSER_EnableGyroscope() -> Result;
    pub fn HIDUSER_DisableGyroscope() -> Result;
    pub fn HIDUSER_GetGyroscopeRawToDpsCoefficient(coeff: *mut f32) -> Result;
    pub fn HIDUSER_GetSoundVolume(volume: *mut u8_) -> Result;
}
use ::types::*;
