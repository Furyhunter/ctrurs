/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum DSP_InterruptType { DSP_INTERRUPT_PIPE = 2, }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum DSP_PipeDirection { DSP_PIPE_INPUT = 0, DSP_PIPE_OUTPUT = 1, }
extern "C" {
    pub fn dspInit() -> Result;
    pub fn dspExit();
    pub fn DSP_GetHeadphoneStatus(is_inserted: *mut u8) -> Result;
    pub fn DSP_FlushDataCache(address: *const ::libc::c_void, size: u32_)
     -> Result;
    pub fn DSP_InvalidateDataCache(address: *const ::libc::c_void, size: u32_)
     -> Result;
    pub fn DSP_GetSemaphoreHandle(semaphore: *mut Handle) -> Result;
    pub fn DSP_SetSemaphore(value: u16_) -> Result;
    pub fn DSP_SetSemaphoreMask(mask: u16_) -> Result;
    pub fn DSP_LoadComponent(component: *const ::libc::c_void, size: u32_,
                             prog_mask: u16_, data_mask: u16_,
                             is_loaded: *mut u8) -> Result;
    pub fn DSP_UnloadComponent() -> Result;
    pub fn DSP_RegisterInterruptEvents(handle: Handle, interrupt: u32_,
                                       channel: u32_) -> Result;
    pub fn DSP_ReadPipeIfPossible(channel: u32_, peer: u32_,
                                  buffer: *mut ::libc::c_void, length: u16_,
                                  length_read: *mut u16_) -> Result;
    pub fn DSP_WriteProcessPipe(channel: u32_, buffer: *const ::libc::c_void,
                                length: u32_) -> Result;
    pub fn DSP_ConvertProcessAddressFromDspDram(dsp_address: u32_,
                                                arm_address: *mut u32_)
     -> Result;
    pub fn DSP_RecvData(regNo: u16_, value: *mut u16_) -> Result;
    pub fn DSP_RecvDataIsReady(regNo: u16_, is_ready: *mut u8) -> Result;
    pub fn DSP_SendData(regNo: u16_, value: u16_) -> Result;
    pub fn DSP_SendDataIsEmpty(regNo: u16_, is_empty: *mut u8) -> Result;
}
use ::types::*;
