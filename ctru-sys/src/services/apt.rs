/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum NS_APPID {
    APPID_NONE = 0,
    APPID_HOMEMENU = 257,
    APPID_CAMERA = 272,
    APPID_FRIENDS_LIST = 274,
    APPID_GAME_NOTES = 275,
    APPID_WEB = 276,
    APPID_INSTRUCTION_MANUAL = 277,
    APPID_NOTIFICATIONS = 278,
    APPID_MIIVERSE = 279,
    APPID_MIIVERSE_POSTING = 280,
    APPID_AMIIBO_SETTINGS = 281,
    APPID_APPLICATION = 768,
    APPID_ESHOP = 769,
    APPID_SOFTWARE_KEYBOARD = 1025,
    APPID_APPLETED = 1026,
    APPID_PNOTE_AP = 1028,
    APPID_SNOTE_AP = 1029,
    APPID_ERROR = 1030,
    APPID_MINT = 1031,
    APPID_EXTRAPAD = 1032,
    APPID_MEMOLIB = 1033,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum APT_AppletPos {
    APTPOS_NONE = -1,
    APTPOS_APP = 0,
    APTPOS_APPLIB = 1,
    APTPOS_SYS = 2,
    APTPOS_SYSLIB = 3,
    APTPOS_RESIDENT = 4,
}
pub type APT_AppletAttr = u8_;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum APT_QueryReply {
    APTREPLY_REJECT = 0,
    APTREPLY_ACCEPT = 1,
    APTREPLY_LATER = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum APT_Signal {
    APTSIGNAL_NONE = 0,
    APTSIGNAL_HOMEBUTTON = 1,
    APTSIGNAL_HOMEBUTTON2 = 2,
    APTSIGNAL_SLEEP_QUERY = 3,
    APTSIGNAL_SLEEP_CANCEL = 4,
    APTSIGNAL_SLEEP_ENTER = 5,
    APTSIGNAL_SLEEP_WAKEUP = 6,
    APTSIGNAL_SHUTDOWN = 7,
    APTSIGNAL_POWERBUTTON = 8,
    APTSIGNAL_POWERBUTTON2 = 9,
    APTSIGNAL_TRY_SLEEP = 10,
    APTSIGNAL_ORDERTOCLOSE = 11,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum APT_Command {
    APTCMD_NONE = 0,
    APTCMD_WAKEUP = 1,
    APTCMD_REQUEST = 2,
    APTCMD_RESPONSE = 3,
    APTCMD_EXIT = 4,
    APTCMD_MESSAGE = 5,
    APTCMD_HOMEBUTTON_ONCE = 6,
    APTCMD_HOMEBUTTON_TWICE = 7,
    APTCMD_DSP_SLEEP = 8,
    APTCMD_DSP_WAKEUP = 9,
    APTCMD_WAKEUP_EXIT = 10,
    APTCMD_WAKEUP_PAUSE = 11,
    APTCMD_WAKEUP_CANCEL = 12,
    APTCMD_WAKEUP_CANCELALL = 13,
    APTCMD_WAKEUP_POWERBUTTON = 14,
    APTCMD_WAKEUP_JUMPTOHOME = 15,
    APTCMD_SYSAPPLET_REQUEST = 16,
    APTCMD_WAKEUP_LAUNCHAPP = 17,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct aptCaptureBufInfo {
    pub size: u32_,
    pub is3D: u32_,
    pub top: Struct_Unnamed1,
    pub bottom: Struct_Unnamed1,
}
impl ::core::default::Default for aptCaptureBufInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed1 {
    pub leftOffset: u32_,
    pub rightOffset: u32_,
    pub format: u32_,
}
impl ::core::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum APT_HookType {
    APTHOOK_ONSUSPEND = 0,
    APTHOOK_ONRESTORE = 1,
    APTHOOK_ONSLEEP = 2,
    APTHOOK_ONWAKEUP = 3,
    APTHOOK_ONEXIT = 4,
    APTHOOK_COUNT = 5,
}
pub type aptHookFn =
    ::core::option::Option<unsafe extern "C" fn(hook: APT_HookType,
                                                param: *mut ::libc::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct tag_aptHookCookie {
    pub next: *mut tag_aptHookCookie,
    pub callback: aptHookFn,
    pub param: *mut ::libc::c_void,
}
impl ::core::default::Default for tag_aptHookCookie {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type aptHookCookie = tag_aptHookCookie;
pub type aptMessageCb =
    ::core::option::Option<unsafe extern "C" fn(user: *mut ::libc::c_void,
                                                sender: NS_APPID,
                                                msg: *mut ::libc::c_void,
                                                msgsize: size_t)>;
extern "C" {
    pub fn aptInit() -> Result;
    pub fn aptExit();
    pub fn aptSendCommand(aptcmdbuf: *mut u32_) -> Result;
    pub fn aptIsSleepAllowed() -> u8;
    pub fn aptSetSleepAllowed(allowed: u8);
    pub fn aptMainLoop() -> u8;
    pub fn aptHook(cookie: *mut aptHookCookie, callback: aptHookFn,
                   param: *mut ::libc::c_void);
    pub fn aptUnhook(cookie: *mut aptHookCookie);
    pub fn aptSetMessageCallback(callback: aptMessageCb,
                                 user: *mut ::libc::c_void);
    pub fn aptLaunchLibraryApplet(appId: NS_APPID, buf: *mut ::libc::c_void,
                                  bufsize: size_t, handle: Handle) -> u8;
    pub fn APT_GetLockHandle(flags: u16_, lockHandle: *mut Handle) -> Result;
    pub fn APT_Initialize(appId: NS_APPID, attr: APT_AppletAttr,
                          signalEvent: *mut Handle, resumeEvent: *mut Handle)
     -> Result;
    pub fn APT_Finalize(appId: NS_APPID) -> Result;
    pub fn APT_HardwareResetAsync() -> Result;
    pub fn APT_Enable(attr: APT_AppletAttr) -> Result;
    pub fn APT_GetAppletManInfo(inpos: APT_AppletPos,
                                outpos: *mut APT_AppletPos,
                                req_appid: *mut NS_APPID,
                                menu_appid: *mut NS_APPID,
                                active_appid: *mut NS_APPID) -> Result;
    pub fn APT_GetAppletInfo(appID: NS_APPID, pProgramID: *mut u64_,
                             pMediaType: *mut u8_, pRegistered: *mut u8,
                             pLoadState: *mut u8,
                             pAttributes: *mut APT_AppletAttr) -> Result;
    pub fn APT_GetAppletProgramInfo(id: u32_, flags: u32_,
                                    titleversion: *mut u16_) -> Result;
    pub fn APT_GetProgramID(pProgramID: *mut u64_) -> Result;
    pub fn APT_PrepareToJumpToHomeMenu() -> Result;
    pub fn APT_JumpToHomeMenu(param: *const ::libc::c_void, paramSize: size_t,
                              handle: Handle) -> Result;
    pub fn APT_PrepareToJumpToApplication(exiting: u8) -> Result;
    pub fn APT_JumpToApplication(param: *const ::libc::c_void,
                                 paramSize: size_t, handle: Handle) -> Result;
    pub fn APT_IsRegistered(appID: NS_APPID, out: *mut u8) -> Result;
    pub fn APT_InquireNotification(appID: u32_, signalType: *mut APT_Signal)
     -> Result;
    pub fn APT_NotifyToWait(appID: NS_APPID) -> Result;
    pub fn APT_AppletUtility(id: ::libc::c_int, out: *mut ::libc::c_void,
                             outSize: size_t, in_: *const ::libc::c_void,
                             inSize: size_t) -> Result;
    pub fn APT_SleepIfShellClosed() -> Result;
    pub fn APT_TryLockTransition(transition: u32_, succeeded: *mut u8)
     -> Result;
    pub fn APT_UnlockTransition(transition: u32_) -> Result;
    pub fn APT_GlanceParameter(appID: NS_APPID, buffer: *mut ::libc::c_void,
                               bufferSize: size_t, sender: *mut NS_APPID,
                               command: *mut APT_Command,
                               actualSize: *mut size_t,
                               parameter: *mut Handle) -> Result;
    pub fn APT_ReceiveParameter(appID: NS_APPID, buffer: *mut ::libc::c_void,
                                bufferSize: size_t, sender: *mut NS_APPID,
                                command: *mut APT_Command,
                                actualSize: *mut size_t,
                                parameter: *mut Handle) -> Result;
    pub fn APT_SendParameter(source: NS_APPID, dest: NS_APPID,
                             command: APT_Command,
                             buffer: *const ::libc::c_void, bufferSize: u32_,
                             parameter: Handle) -> Result;
    pub fn APT_CancelParameter(source: NS_APPID, dest: NS_APPID,
                               success: *mut u8) -> Result;
    pub fn APT_SendCaptureBufferInfo(captureBuf: *const aptCaptureBufInfo)
     -> Result;
    pub fn APT_ReplySleepQuery(appID: NS_APPID, reply: APT_QueryReply)
     -> Result;
    pub fn APT_ReplySleepNotificationComplete(appID: NS_APPID) -> Result;
    pub fn APT_PrepareToCloseApplication(cancelPreload: u8) -> Result;
    pub fn APT_CloseApplication(param: *const ::libc::c_void,
                                paramSize: size_t, handle: Handle) -> Result;
    pub fn APT_SetAppCpuTimeLimit(percent: u32_) -> Result;
    pub fn APT_GetAppCpuTimeLimit(percent: *mut u32_) -> Result;
    pub fn APT_CheckNew3DS(out: *mut u8) -> Result;
    pub fn APT_PrepareToDoApplicationJump(flags: u8_, programID: u64_,
                                          mediatype: u8_) -> Result;
    pub fn APT_DoApplicationJump(param: *const ::libc::c_void,
                                 paramSize: size_t,
                                 hmac: *const ::libc::c_void) -> Result;
    pub fn APT_PrepareToStartLibraryApplet(appID: NS_APPID) -> Result;
    pub fn APT_StartLibraryApplet(appID: NS_APPID,
                                  param: *const ::libc::c_void,
                                  paramSize: size_t, handle: Handle)
     -> Result;
    pub fn APT_PrepareToStartSystemApplet(appID: NS_APPID) -> Result;
    pub fn APT_StartSystemApplet(appID: NS_APPID,
                                 param: *const ::libc::c_void,
                                 paramSize: size_t, handle: Handle) -> Result;
    pub fn APT_GetSharedFont(fontHandle: *mut Handle, mapAddr: *mut u32_)
     -> Result;
}
use ::types::*;
